import pygame, random, sys, math

  #star #https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.freepik.com%2Ffree-photos-vectors%2Fcartoon-stars-png&psig=AOvVaw1q1awV4ghIjxs8f30vh86L&ust=1708654369946000&source=images&cd=vfe&opi=89978449&ved=0CBMQjRxqFwoTCIi12_bxvYQDFQAAAAAdAAAAABAE
  #background https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTtr83gni_FSycPowjmh7NAET7EFojHmfXg-w&usqp=CAU
  #gift https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRM-Qrn-v5aDRfOclTLQGUwoWfaRSnyXgicYQ&usqp=CAU
  #star2 https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTV-WTE1xi6Pkz8TPElWkdp-znxylRuoQ7qd_GQpUSuNQ&s

width = 900
height = 650
clock = pygame.time.Clock()
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption("game")
bgimage = pygame.transform.scale(pygame.image.load('bgpic.jpg').convert(), (900,650))
running = True
basegroundy = 0




class Baseground(pygame.sprite.Sprite):
    def __init__(self,x,y):
        super(Baseground, self).__init__()
        self.image = pygame.Surface((1000,500), pygame.SRCALPHA, 32)
        self.image.convert_alpha()
        self.image.fill("black")
        self.rect = self.image.get_rect(center = (x,y))

class Platform(pygame.sprite.Sprite):
    def __init__(self):
        super(Platform, self).__init__()
        self.image = pygame.Surface((100,30), pygame.SRCALPHA, 32)
        self.image.convert_alpha()
        self.image.fill("brown")
        self.rect = self.image.get_rect(center = (random.randint(10,890), random.randint(10,590)))
        self.deltax = random.choice([-1,1])
        self.velocity = 5
        
    def move(self):
        self.rect.left += 3
        if  self.rect.right>800:
            self.rect =  self.image.get_rect(center = (random.randint(10,890), random.randint(10,590)))


class Platform_reverse(pygame.sprite.Sprite):
    def __init__(self):
        super(Platform_reverse, self).__init__()
        self.image = pygame.Surface((100,30), pygame.SRCALPHA, 32)
        self.image.convert_alpha()
        self.image.fill("white")
        self.rect = self.image.get_rect(center = (random.randint(10,890), random.randint(10,590)))
        self.deltax = random.choice([-1,1])
        self.velocity = 5
    
    def move_reverse(self):
        self.rect.right -= 3
        if  self.rect.left<0:
            self.velocity *= -1
            self.rect =self.image.get_rect(center = (random.randint(10,890), random.randint(10,590)))

       
           
class Obstacle(pygame.sprite.Sprite):
    def __init__(self):
        super(Obstacle, self).__init__()
        self.image = pygame.image.load('star.jpg').convert()
        self.image.convert_alpha()
        self.image = pygame.transform.scale(self.image, (40,40))
        self.rect = self.image.get_rect(center = ((random.randint(20,890),random.randint(-940,-20))))
        
    def fall(self):
        self.rect.centery += 4
        if self.rect.bottom > 690:
            self.rect =self.image.get_rect(center = ((random.randint(20,890),random.randint(-940,-20))))

class Gift(pygame.sprite.Sprite):
     def __init__(self):
        super(Gift, self).__init__()
        self.image = pygame.image.load('gift.png').convert()
        self.image.convert_alpha()
        self.image = pygame.transform.scale(self.image, (30,30))
        self.rect = self.image.get_rect(center = ((random.randint(20,890),random.randint(-940,-20))))
        self.rect = self.image.get_rect(center = (random.randint(10,790), random.randint(10,590)))


       

    
    
        
       

class Player(pygame.sprite.Sprite):
    def __init__(self,x,y,color):
        super(Player, self).__init__()
        self.image = pygame.Surface((25,25), pygame.SRCALPHA, 32)
        self.color = color
        self.image.convert_alpha()
        self.image.fill(color)
        self.rect = self.image.get_rect(center = (x,y))
        self.deltax = random.choice([-1,1])
        self.deltay = random.choice([-1,1])
        self.hp = 500
      


    def fall_damage(self ,damage):
                self.hp = self.hp - damage
                if self.color == "green":
                    self.hp = self.hp -damage+2
                return self.hp
    
    # def relocate(self):
    #     self.rect = self.image.get_rect(center = (390,540))
       




        

    

obstacle = pygame.sprite.Group()
for i in range(4):
    obstacle.add(Obstacle())

gift = pygame.sprite.Group()
for i in range(3):
    gift.add(Gift())

platforms = pygame.sprite.Group()
for i in range(4):
    platforms.add(Platform())
    
platforms_reverse = pygame.sprite.Group()
for i in range(4):
    platforms_reverse.add(Platform_reverse())


player1 = Player(390,530,"green")
player2 = Player(390,530,"white")
player =  pygame.sprite.Group()
player.add(player1)
player.add(player2)


ground = pygame.sprite.Group()
baseground = (Baseground(500,800))
ground.add(baseground)
ground.add(platforms)
ground.add(platforms_reverse)




gravity = 1
jump = 20
velocity = jump
start_jump = False
damage = 10





while running:

    for event in pygame.event.get(): # pygame.event.get()
        if event.type == pygame.QUIT:
            running = False
    

    
   

   
    keys = pygame.key.get_pressed()
    
    if keys[pygame.K_a] and player1.rect.centerx >5:
        player1.rect.centerx -= 5
        
        
       
    
    if keys[pygame.K_d] and player1.rect.centerx <790:
        player1.rect.centerx += 5
  
      
    
    if keys[pygame.K_w] and player1.rect.centery > 5:
        start_jump = True
    
   
 
    

    if event.type == pygame.KEYDOWN:
        if event.key == pygame.K_LEFT:
            player2.rect.centerx -= 5
        if event.key == pygame.K_RIGHT:
            player2.rect.centerx += 5
        if event.key == pygame.K_DOWN and player2.rect.centery <490:
            player2.rect.centery += 5
        if event.key == pygame.K_UP:
            start_jump = True
          
          
          
            
    for p in player:
        for o in obstacle:
            o.fall()  
            if o.rect.colliderect(p.rect):
                p.kill()
        if start_jump == True:
            p.rect.centery -= velocity
            velocity -= gravity
            if velocity < -jump:
                start_jump = False
                velocity = jump
                p.fall_damage(20)
                if p.hp ==0:
                    running = False


       

    # for plat in platforms:    
    #     plat.move()
    #     for p in player:
    #        plat.rect.colliderect(p.rect)

    
    for platr in platforms_reverse:
        platr.move_reverse()
        for p in player:
            if platr.rect.colliderect(p.rect):
                    p.rect.bottom = platr.rect.top
                    if p.rect.left > platr.rect.left or p.rect.right < platr.rect.right:
                        print("hello")

                
                   
                    



        
   




    screen.blit(bgimage,(0,0))
    player.draw(screen)
    ground.draw(screen) 
    # obstacle.draw(screen)
    # gift.draw(screen)
    pygame.display.update()
  

    
    
    pygame.display.flip()
    clock.tick(60)

pygame.quit()
sys.exit()
